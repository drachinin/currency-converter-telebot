import telebot
import requests
from datetime import datetime
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton

# —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ (–ø–æ–ª—É—á–∏—Ç–µ —É @BotFather)
BOT_TOKEN = ""
bot = telebot.TeleBot(BOT_TOKEN)

# API –æ—Ç exchangerate-api.com (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)
API_KEY = ""
BASE_URL = f"https://v6.exchangerate-api.com/v6/{API_KEY}/latest/"

# –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∞–ª—é—Ç—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
POPULAR_CURRENCIES = {
    'USD': {'name': 'üá∫üá∏ –î–æ–ª–ª–∞—Ä', 'emoji': 'üá∫üá∏'},
    'EUR': {'name': 'üá™üá∫ –ï–≤—Ä–æ', 'emoji': 'üá™üá∫'},
    'RUB': {'name': 'üá∑üá∫ –†—É–±–ª—å', 'emoji': 'üá∑üá∫'},
    'CNY': {'name': 'üá®üá≥ –Æ–∞–Ω—å', 'emoji': 'üá®üá≥'},
    'AED': {'name': 'üá¶üá™ –î–∏—Ä—Ö–∞–º –û–ê–≠', 'emoji': 'üá¶üá™'},
    'THB': {'name': 'üáπüá≠ –ë–∞—Ç –¢–∞–∏–ª–∞–Ω–¥', 'emoji': 'üáπüá≠'},
    'TRY': {'name': 'üáπüá∑ –õ–∏—Ä–∞', 'emoji': 'üáπüá∑'},
    'BYN': {'name': 'üáßüáæ –ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —Ä—É–±–ª—å', 'emoji': 'üáßüáæ'}
}

# –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã
ALL_CURRENCIES = {
    'USD': 'üá∫üá∏ –î–æ–ª–ª–∞—Ä –°–®–ê',
    'EUR': 'üá™üá∫ –ï–≤—Ä–æ',
    'RUB': 'üá∑üá∫ –†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å',
    'GBP': 'üá¨üáß –§—É–Ω—Ç —Å—Ç–µ—Ä–ª–∏–Ω–≥–æ–≤',
    'JPY': 'üáØüáµ –Ø–ø–æ–Ω—Å–∫–∞—è –∏–µ–Ω–∞',
    'AED': 'üá¶üá™ –î–∏—Ä—Ö–∞–º –û–ê–≠',
    'THB': 'üáπüá≠ –ë–∞—Ç –¢–∞–∏–ª–∞–Ω–¥',
    'CNY': 'üá®üá≥ –ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å',
    'CAD': 'üá®üá¶ –ö–∞–Ω–∞–¥—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä',
    'AUD': 'üá¶üá∫ –ê–≤—Å—Ç—Ä–∞–ª–∏–π—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä',
    'CHF': 'üá®üá≠ –®–≤–µ–π—Ü–∞—Ä—Å–∫–∏–π —Ñ—Ä–∞–Ω–∫',
    'SGD': 'üá∏üá¨ –°–∏–Ω–≥–∞–ø—É—Ä—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä',
    'TRY': 'üáπüá∑ –¢—É—Ä–µ—Ü–∫–∞—è –ª–∏—Ä–∞',
    'BYN': 'üáßüáæ –ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —Ä—É–±–ª—å',
    'KZT': 'üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–π —Ç–µ–Ω–≥–µ'
}

user_states = {}

# –º–µ–Ω—é
def create_main_menu():
    menu = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    menu.add(
        KeyboardButton("üí± –û–±—ã—á–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è"),
        KeyboardButton("üîÑ –û–±—Ä–∞—Ç–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è"),
        KeyboardButton("üìä –ö—É—Ä—Å –≤–∞–ª—é—Ç"),
        KeyboardButton("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã")
    )
    return menu

# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–ª–∞
def format_number(number):
    try:
        if isinstance(number, float):
            integer_part = int(number)
            fractional_part = number - integer_part
        else:
            integer_part = number
            fractional_part = 0

        formatted_integer = "{:,}".format(integer_part).replace(",", " ")

        if fractional_part > 0:
            fractional_str = f"{fractional_part:.2f}".split('.')[1]
            return f"{formatted_integer}.{fractional_str}"
        else:
            return formatted_integer
    except:
        return str(number)

# –ø–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã
def get_exchange_rate(base_currency, target_currency):
    try:
        response = requests.get(f"{BASE_URL}{base_currency}")
        data = response.json()

        if data['result'] == 'success':
            return data['conversion_rates'].get(target_currency)
        else:
            return None
    except:
        return None

# –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä—É–±–ª—è
def get_rub_exchange_rates():
    try:
        response = requests.get(f"{BASE_URL}USD")
        data = response.json()

        if data['result'] != 'success':
            return None

        usd_rates = data['conversion_rates']
        rub_per_usd = usd_rates.get('RUB')

        if not rub_per_usd:
            return None

        rates = {}
        for currency in ['USD', 'EUR', 'AED', 'THB', 'CNY', 'BYN', 'GBP', 'JPY', 'TRY', 'KZT', 'CAD', 'AUD', 'CHF',
                         'SGD']:
            if currency == 'RUB':
                continue

            if currency == 'USD':
                rates[currency] = rub_per_usd
            else:
                currency_to_usd = usd_rates.get(currency)
                if currency_to_usd and currency_to_usd > 0:
                    rates[currency] = rub_per_usd / currency_to_usd

        return rates
    except:
        return None

# —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_currency_keyboard(selected_currency=None, step=1, conversion_type='normal'):
    keyboard = InlineKeyboardMarkup(row_width=3)

    buttons = []
    for currency, info in POPULAR_CURRENCIES.items():
        if step == 1:
            buttons.append(InlineKeyboardButton(
                text=f"{info['emoji']} {currency}",
                callback_data=f"{conversion_type}_from_{currency}"
            ))
        else:
            if currency != selected_currency:
                buttons.append(InlineKeyboardButton(
                    text=f"{info['emoji']} {currency}",
                    callback_data=f"{conversion_type}_to_{currency}"
                ))

    for i in range(0, len(buttons), 3):
        keyboard.add(*buttons[i:i + 3])

    if step == 1:
        keyboard.add(InlineKeyboardButton("üìã –í—Å–µ –≤–∞–ª—é—Ç—ã", callback_data=f"{conversion_type}_all_currencies"))
    else:
        keyboard.add(InlineKeyboardButton("üìã –í—Å–µ –≤–∞–ª—é—Ç—ã",
                                          callback_data=f"{conversion_type}_all_currencies_to_{selected_currency}"))

    keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))

    return keyboard

# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ –≤—Å–µ–º–∏ –≤–∞–ª—é—Ç–∞–º–∏
def create_all_currencies_keyboard(selected_currency=None, step=1, conversion_type='normal'):
    keyboard = InlineKeyboardMarkup(row_width=3)

    buttons = []
    for currency, name in ALL_CURRENCIES.items():
        if step == 1:
            buttons.append(InlineKeyboardButton(
                text=f"{currency}",
                callback_data=f"{conversion_type}_from_{currency}"
            ))
        else:
            if currency != selected_currency:
                buttons.append(InlineKeyboardButton(
                    text=f"{currency}",
                    callback_data=f"{conversion_type}_to_{currency}"
                ))

    for i in range(0, len(buttons), 3):
        keyboard.add(*buttons[i:i + 3])

    if step == 1:
        keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º", callback_data=f"{conversion_type}_back_to_popular"))
    else:
        keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º",
                                          callback_data=f"{conversion_type}_back_to_popular_to_{selected_currency}"))

    return keyboard

# —Å—Ç–∞—Ä—Ç
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    welcome_text = """
–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
*–û–±—ã—á–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è* - –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å—É–º–º—É –∏–∑ –æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã –≤ –¥—Ä—É–≥—É—é
*–û–±—Ä–∞—Ç–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è* - —É–∑–Ω–∞—Ç—å —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –≤–∞–ª—é—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω—É–∂–Ω–æ–π —Å—É–º–º—ã
*–ö—É—Ä—Å –≤–∞–ª—é—Ç* - –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –∫ —Ä—É–±–ª—é
*–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã* - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –≤–∞–ª—é—Ç

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞!
    """

    bot.send_message(message.chat.id, welcome_text,
                     parse_mode='Markdown',
                     reply_markup=create_main_menu())

# –æ–±—ã—á–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
@bot.message_handler(commands=['convert'])
def start_conversion_command(message):
    start_conversion_process(message.chat.id, 'normal')

# –æ–±—Ä–∞—Ç–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
@bot.message_handler(commands=['reverse'])
def start_reverse_conversion_command(message):
    start_conversion_process(message.chat.id, 'reverse')

# –ø–æ–∫–∞–∑–∞—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
@bot.message_handler(commands=['rates'])
def show_rates_command(message):
    show_rates(message.chat.id)

# –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç
@bot.message_handler(commands=['currencies'])
def show_currencies_command(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É"""
    show_currencies(message.chat.id)

# –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É
@bot.message_handler(
    func=lambda message: message.text in ["üí± –û–±—ã—á–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è", "üîÑ –û–±—Ä–∞—Ç–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è", "üìä –ö—É—Ä—Å –≤–∞–ª—é—Ç",
                                          "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã"])
def handle_menu_buttons(message):
    if message.text == "üí± –û–±—ã—á–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è":
        start_conversion_process(message.chat.id, 'normal')
    elif message.text == "üîÑ –û–±—Ä–∞—Ç–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è":
        start_conversion_process(message.chat.id, 'reverse')
    elif message.text == "üìä –ö—É—Ä—Å –≤–∞–ª—é—Ç":
        show_rates(message.chat.id)
    elif message.text == "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã":
        show_currencies(message.chat.id)

# –ø–æ–∫–∞–∑–∞—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∫ —Ä—É–±–ª—é
def show_rates(chat_id):
    try:
        rates_text = "üìà *–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –∫ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º—É —Ä—É–±–ª—é:*\n\n"
        rates_text += "*–°–∫–æ–ª—å–∫–æ —Ä—É–±–ª–µ–π –¥–∞—é—Ç –∑–∞ 1 –µ–¥–∏–Ω–∏—Ü—É –≤–∞–ª—é—Ç—ã:*\n\n"

        rub_rates = get_rub_exchange_rates()

        if not rub_rates:
            bot.send_message(chat_id, "‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã*", parse_mode='Markdown',
                             reply_markup=create_main_menu())
            return

        main_currencies = ['USD', 'EUR', 'AED', 'THB', 'CNY', 'BYN']
        for currency in main_currencies:
            rate = rub_rates.get(currency)
            if rate:
                currency_name = POPULAR_CURRENCIES.get(currency, {}).get('name', ALL_CURRENCIES.get(currency, currency))
                formatted_rate = format_number(round(rate, 2))
                rates_text += f"‚Ä¢ 1 {currency} ({currency_name}) = *{formatted_rate} RUB*\n"

        rates_text += "\n*–î—Ä—É–≥–∏–µ –≤–∞–ª—é—Ç—ã:*\n"

        other_currencies = ['GBP', 'JPY', 'TRY', 'KZT', 'CAD', 'AUD']
        for currency in other_currencies:
            rate = rub_rates.get(currency)
            if rate:
                currency_name = ALL_CURRENCIES.get(currency, currency)
                formatted_rate = format_number(round(rate, 2))
                rates_text += f"‚Ä¢ 1 {currency} = *{formatted_rate} RUB*\n"

        rates_text += f"\nüîÄ *–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫—Ä–æ—Å—Å-–∫—É—Ä—Å—ã:*\n"
        cross_pairs = [('EUR', 'USD'), ('USD', 'AED'), ('USD', 'THB')]

        for from_curr, to_curr in cross_pairs:
            rate = get_exchange_rate(from_curr, to_curr)
            if rate:
                rates_text += f"‚Ä¢ 1 {from_curr} = *{rate:.4f}* {to_curr}\n"

        rates_text += f"\nüìÖ *–û–±–Ω–æ–≤–ª–µ–Ω–æ:* {datetime.now().strftime('%d.%m.%Y %H:%M')}"

        bot.send_message(chat_id, rates_text, parse_mode='Markdown', reply_markup=create_main_menu())

    except Exception as e:
        bot.send_message(chat_id, f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤:* {str(e)}", parse_mode='Markdown',
                         reply_markup=create_main_menu())

# –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç
def show_currencies(chat_id):
    try:
        currencies_text = "üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã:*\n\n"

        for code, name in ALL_CURRENCIES.items():
            currencies_text += f"‚Ä¢ *{code}* - {name}\n"

        currencies_text += f"\n*–í—Å–µ–≥–æ –≤–∞–ª—é—Ç:* {len(ALL_CURRENCIES)}"

        bot.send_message(chat_id, currencies_text, parse_mode='Markdown', reply_markup=create_main_menu())

    except Exception as e:
        bot.send_message(chat_id, f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–∞–ª—é—Ç:* {str(e)}", parse_mode='Markdown',
                         reply_markup=create_main_menu())


@bot.callback_query_handler(func=lambda call: True)
def handle_callbacks(call):
    chat_id = call.message.chat.id
    message_id = call.message.message_id

    if call.data == "cancel":
        bot.delete_message(chat_id, message_id)
        if chat_id in user_states:
            del user_states[chat_id]
        bot.send_message(chat_id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=create_main_menu())

    elif call.data == "normal_back_to_popular":
        bot.edit_message_text(
            "üí± *–û–±—ã—á–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—É—é –≤–∞–ª—é—Ç—É:",
            chat_id, message_id,
            parse_mode='Markdown',
            reply_markup=create_currency_keyboard(step=1, conversion_type='normal')
        )

    elif call.data.startswith("normal_back_to_popular_to_"):
        from_currency = call.data.split('_')[-1]
        bot.edit_message_text(
            f"üí± *–û–±—ã—á–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ {from_currency}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –≤–∞–ª—é—Ç—É:",
            chat_id, message_id,
            parse_mode='Markdown',
            reply_markup=create_currency_keyboard(selected_currency=from_currency, step=2, conversion_type='normal')
        )

    elif call.data == "normal_all_currencies":
        bot.edit_message_text(
            "üí± *–û–±—ã—á–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—É—é –≤–∞–ª—é—Ç—É –∏–∑ –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:",
            chat_id, message_id,
            parse_mode='Markdown',
            reply_markup=create_all_currencies_keyboard(step=1, conversion_type='normal')
        )

    elif call.data.startswith("normal_all_currencies_to_"):
        from_currency = call.data.split('_')[-1]
        bot.edit_message_text(
            f"üí± *–û–±—ã—á–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ {from_currency}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –≤–∞–ª—é—Ç—É –∏–∑ –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:",
            chat_id, message_id,
            parse_mode='Markdown',
            reply_markup=create_all_currencies_keyboard(selected_currency=from_currency, step=2,
                                                        conversion_type='normal')
        )

    elif call.data.startswith("normal_from_"):
        from_currency = call.data.split('_')[-1]
        user_states[chat_id] = {
            'conversion_type': 'normal',
            'from_currency': from_currency,
            'step': 2,
            'last_message_id': message_id
        }

        bot.edit_message_text(
            f"üí± *–û–±—ã—á–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ {from_currency}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –≤–∞–ª—é—Ç—É:",
            chat_id, message_id,
            parse_mode='Markdown',
            reply_markup=create_currency_keyboard(selected_currency=from_currency, step=2, conversion_type='normal')
        )

    elif call.data.startswith("normal_to_"):
        to_currency = call.data.split('_')[-1]

        if chat_id in user_states and user_states[chat_id]['step'] == 2 and user_states[chat_id][
            'conversion_type'] == 'normal':
            from_currency = user_states[chat_id]['from_currency']
            user_states[chat_id] = {
                'conversion_type': 'normal',
                'from_currency': from_currency,
                'to_currency': to_currency,
                'step': 3,
                'last_message_id': message_id
            }

            bot.edit_message_text(
                f"üí± *–û–±—ã—á–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: {from_currency} ‚Üí {to_currency}*\n\n*–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:*",
                chat_id, message_id,
                parse_mode='Markdown'
            )

    elif call.data == "reverse_back_to_popular":
        bot.edit_message_text(
            "üîÑ *–û–±—Ä–∞—Ç–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—É—é –≤–∞–ª—é—Ç—É:",
            chat_id, message_id,
            parse_mode='Markdown',
            reply_markup=create_currency_keyboard(step=1, conversion_type='reverse')
        )

    elif call.data.startswith("reverse_back_to_popular_to_"):
        from_currency = call.data.split('_')[-1]
        bot.edit_message_text(
            f"üîÑ *–û–±—Ä–∞—Ç–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ {from_currency}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –≤–∞–ª—é—Ç—É:",
            chat_id, message_id,
            parse_mode='Markdown',
            reply_markup=create_currency_keyboard(selected_currency=from_currency, step=2, conversion_type='reverse')
        )

    elif call.data == "reverse_all_currencies":
        bot.edit_message_text(
            "üîÑ *–û–±—Ä–∞—Ç–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—É—é –≤–∞–ª—é—Ç—É –∏–∑ –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:",
            chat_id, message_id,
            parse_mode='Markdown',
            reply_markup=create_all_currencies_keyboard(step=1, conversion_type='reverse')
        )

    elif call.data.startswith("reverse_all_currencies_to_"):
        from_currency = call.data.split('_')[-1]
        bot.edit_message_text(
            f"üîÑ *–û–±—Ä–∞—Ç–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ {from_currency}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –≤–∞–ª—é—Ç—É –∏–∑ –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:",
            chat_id, message_id,
            parse_mode='Markdown',
            reply_markup=create_all_currencies_keyboard(selected_currency=from_currency, step=2,
                                                        conversion_type='reverse')
        )

    elif call.data.startswith("reverse_from_"):
        from_currency = call.data.split('_')[-1]
        user_states[chat_id] = {
            'conversion_type': 'reverse',
            'from_currency': from_currency,
            'step': 2,
            'last_message_id': message_id
        }

        bot.edit_message_text(
            f"üîÑ *–û–±—Ä–∞—Ç–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ {from_currency}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –≤–∞–ª—é—Ç—É:",
            chat_id, message_id,
            parse_mode='Markdown',
            reply_markup=create_currency_keyboard(selected_currency=from_currency, step=2, conversion_type='reverse')
        )

    elif call.data.startswith("reverse_to_"):
        to_currency = call.data.split('_')[-1]

        if chat_id in user_states and user_states[chat_id]['step'] == 2 and user_states[chat_id][
            'conversion_type'] == 'reverse':
            from_currency = user_states[chat_id]['from_currency']
            user_states[chat_id] = {
                'conversion_type': 'reverse',
                'from_currency': from_currency,
                'to_currency': to_currency,
                'step': 3,
                'last_message_id': message_id
            }

            bot.edit_message_text(
                f"üîÑ *–û–±—Ä–∞—Ç–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: {from_currency} ‚Üí {to_currency}*\n\n*–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Å—É–º–º—É –≤ {to_currency}:*",
                chat_id, message_id,
                parse_mode='Markdown'
            )

# –∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
def start_conversion_process(chat_id, conversion_type='normal', message_id=None):
    user_states[chat_id] = {'step': 1, 'conversion_type': conversion_type}

    type_text = "üí± –û–±—ã—á–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è" if conversion_type == 'normal' else "üîÑ –û–±—Ä–∞—Ç–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è"

    if message_id:
        bot.edit_message_text(
            f"{type_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—É—é –≤–∞–ª—é—Ç—É:",
            chat_id, message_id,
            parse_mode='Markdown',
            reply_markup=create_currency_keyboard(step=1, conversion_type=conversion_type)
        )
    else:
        msg = bot.send_message(
            chat_id,
            f"{type_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—É—é –≤–∞–ª—é—Ç—É:",
            parse_mode='Markdown',
            reply_markup=create_currency_keyboard(step=1, conversion_type=conversion_type)
        )
        user_states[chat_id]['last_message_id'] = msg.message_id

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
@bot.message_handler(func=lambda message: True)
def handle_other_messages(message):
    chat_id = message.chat.id

    if chat_id in user_states and user_states[chat_id]['step'] == 3:
        process_amount(message)
    else:
        bot.send_message(chat_id,
                         "*–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –Ω–∏–∂–µ:*",
                         parse_mode='Markdown',
                         reply_markup=create_main_menu())

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—É–º–º—ã
def process_amount(message):
    chat_id = message.chat.id

    if chat_id not in user_states or user_states[chat_id]['step'] != 3:
        bot.send_message(chat_id, "‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=create_main_menu())
        return

    try:
        amount = float(message.text.replace(',', '.'))

        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")

        conversion_type = user_states[chat_id]['conversion_type']
        from_currency = user_states[chat_id]['from_currency']
        to_currency = user_states[chat_id]['to_currency']
        last_message_id = user_states[chat_id].get('last_message_id')

        rate = get_exchange_rate(from_currency, to_currency)

        if rate is None:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç")

        if conversion_type == 'normal':
            converted_amount = amount * rate
            result_text = create_normal_conversion_text(amount, from_currency, converted_amount, to_currency, rate)
        else:
            required_amount = amount / rate
            result_text = create_reverse_conversion_text(amount, to_currency, required_amount, from_currency, rate)

        try:
            bot.delete_message(chat_id, message.message_id)
        except:
            pass

        if last_message_id:
            try:
                completion_text = "*–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞‚úÖ  –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∏–∂–µ:*" if conversion_type == 'normal' else "‚úÖ *–†–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∏–∂–µ:*"
                bot.edit_message_text(
                    completion_text,
                    chat_id, last_message_id,
                    parse_mode='Markdown'
                )
            except:
                pass

        bot.send_message(chat_id, result_text,
                         parse_mode='Markdown',
                         reply_markup=create_main_menu())

        del user_states[chat_id]

    except ValueError:
        conversion_type = user_states[chat_id]['conversion_type']
        error_msg = "*–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100 –∏–ª–∏ 150.50):*" if conversion_type == 'normal' else "‚ùå *–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∂–µ–ª–∞–µ–º—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5000 –∏–ª–∏ 7500.50):*"
        msg = bot.send_message(chat_id, error_msg, parse_mode='Markdown')

        user_states[chat_id]['step'] = 3
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå *–û—à–∏–±–∫–∞:* {str(e)}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                         parse_mode='Markdown',
                         reply_markup=create_main_menu())
        if chat_id in user_states:
            del user_states[chat_id]

# —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±—ã—á–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
def create_normal_conversion_text(amount, from_currency, converted_amount, to_currency, rate):
    formatted_amount = format_number(amount)
    formatted_converted = format_number(converted_amount)
    formatted_rate = format_number(rate)

    return f"""
üí± *–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:*

*{formatted_amount} {from_currency}* = *{formatted_converted} {to_currency}*

üìä *–ö—É—Ä—Å:* 1 {from_currency} = {formatted_rate} {to_currency}
üìÖ *–û–±–Ω–æ–≤–ª–µ–Ω–æ:* {datetime.now().strftime('%d.%m.%Y %H:%M')}

{POPULAR_CURRENCIES.get(from_currency, {}).get('name', from_currency)} ‚Üí {POPULAR_CURRENCIES.get(to_currency, {}).get('name', to_currency)}
    """

# —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
def create_reverse_conversion_text(desired_amount, to_currency, required_amount, from_currency, rate):
    formatted_desired = format_number(desired_amount)
    formatted_required = format_number(required_amount)
    formatted_rate = format_number(rate)

    return f"""
üîÑ *–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:*

–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å *{formatted_desired} {to_currency}*
–Ω—É–∂–Ω–æ *{formatted_required} {from_currency}*

üìä *–ö—É—Ä—Å:* 1 {from_currency} = {formatted_rate} {to_currency}
üìÖ *–û–±–Ω–æ–≤–ª–µ–Ω–æ:* {datetime.now().strftime('%d.%m.%Y %H:%M')}

{POPULAR_CURRENCIES.get(from_currency, {}).get('name', from_currency)} ‚Üí {POPULAR_CURRENCIES.get(to_currency, {}).get('name', to_currency)}
    """


if __name__ == "__main__":
    print("–¢–æ—á–Ω–æ –≤ –ö—É—Ä—Å–µ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("–ë–æ—Ç –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π")
    bot.infinity_polling()